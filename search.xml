<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/14/hello-world/"/>
      <url>/2019/09/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>泛型的一些总结</title>
      <link href="/2019/09/14/fanxin/"/>
      <url>/2019/09/14/fanxin/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#一泛型概述以及泛型类">一、泛型概述以及泛型类</a></li><li><a href="#二泛型方法">二、泛型方法</a></li><li><a href="#三泛型接口">三、泛型接口</a></li><li><a href="#四extends<=参数类型必须是给定的或者子类型">四、<code>extends</code>、<code>&lt;=</code>、参数类型必须是给定的或者子类型</a></li><li><a href="#5">通配符<code>?</code></a></li><li><a href="#6"><code>super</code>、<code>&gt;=</code>、超类型通配符</a></li><li><a href="#7">通配符<code>extends</code>、<code>super</code>比较</a></li><li><a href="#8">泛型擦除</a></li><li><a href="#9">泛型注意事项</a></li></ul><hr><a id="more"></a><h2 id="一、泛型概述以及泛型类"><a href="#一、泛型概述以及泛型类" class="headerlink" title="一、泛型概述以及泛型类"></a>一、泛型概述以及泛型类</h2><ul><li>泛型就是类型参数化，处理的数据类型不是固定的，而是可以作为参数传入；</li><li>泛型的核心: 告诉编译器想使用什么类型，然后编译器帮你处理一切；</li></ul><p>一个简单的使用:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericClass</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span>U<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//　Generic Class</span>        <span class="token keyword">private</span> U first<span class="token punctuation">;</span>        <span class="token keyword">private</span> V second<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Pair</span><span class="token punctuation">(</span>U first<span class="token punctuation">,</span> V second<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token operator">=</span> first<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> second<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> U <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> first<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> V <span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> second<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Pair<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span>pair <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>为什么<code>Java</code>不直接使用普通的<code>Object</code>类呢 ？</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericClass2</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Pair</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//　Generic Class</span>        <span class="token keyword">private</span> Object first<span class="token punctuation">;</span>        <span class="token keyword">private</span> Object second<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Pair</span><span class="token punctuation">(</span>Object first<span class="token punctuation">,</span> Object second<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token operator">=</span> first<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> second<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Object <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> first<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Object <span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> second<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Pair pair <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> pair<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer age <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> pair<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其实是可以这样的，而且Java的内部就是这样实现的。</p><ul><li><code>Java</code>有<code>Java</code>编译器和<code>Java</code>虚拟机，编译器将<code>Java</code>源代码转换为<code>.class</code>文件，虚拟机加载并运行<code>.class</code>文件。</li><li>对于泛型类，<strong><code>Java</code>编译器会将泛型代码转换为普通的非泛型代码，就像上面的普通<code>Pair</code>类代码及其使用代码一样，将类型参数<code>T</code>擦除，替换为<code>Object</code>，插入必要的强制类型转换</strong>。<code>Java</code>虚拟机实际执行的时候，它是不知道泛型这回事的，它只知道普通的类及代码。</li><li>再次强调，<strong><code>Java</code>泛型是通过擦除实现的，类定义中的类型参数如<code>T</code>会被替换为<code>Object</code></strong>，在程序运行过程中，不知道泛型的实际类型参数，比如<code>Pair&lt;Integer&gt;</code>，运行中只知道<code>Pair</code>，而不知道<code>Integer</code>。</li></ul><p>那为什么还要使用泛型呢? 泛型有两个好处: </p><ul><li>更好的安全性；</li><li>更高的可读性；</li></ul><hr><h2 id="二、泛型方法"><a href="#二、泛型方法" class="headerlink" title="二、泛型方法"></a>二、泛型方法</h2><ul><li>要定义泛型方法，只需要将<strong>泛型参数列表</strong>置于返回值前；</li><li>注意: <strong>一个方法是不是泛型的, 和它所在的类是不是泛型没有任何关系</strong>；</li><li>泛型方法调用的时候，不需要指定类型参数的实际类型，<code>Java</code>编译器会推断出来；</li></ul><p>简单使用: </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> T ele<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Generic Method</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token string">"wangwu"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试泛型类和泛型方法没有联系: </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//泛型类的泛型和泛型方法的泛型没有一点关系</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericClassMethod</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">testMethod1</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        GenericClassMethod<span class="token operator">&lt;</span>String<span class="token operator">></span>gcm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericClassMethod</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gcm<span class="token punctuation">.</span><span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token string">"generic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer res <span class="token operator">=</span> gcm<span class="token punctuation">.</span><span class="token function">testMethod1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出: </p><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token number">10</span></code></pre><hr><h2 id="三、泛型接口"><a href="#三、泛型接口" class="headerlink" title="三、泛型接口"></a>三、泛型接口</h2><p>接口也可以是泛型的，例如，Java中的<code>Comparable</code>和<code>Comparator</code>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>T o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>T o1<span class="token punctuation">,</span> T o2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用这些的时候也要指定具体的类型: 例如<code>Java</code>中的<code>Integer</code>类: </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Integer</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Integer anotherInteger<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span> anotherInteger<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h2 id="四、extends、-lt-、参数类型必须是给定的或者子类型"><a href="#四、extends、-lt-、参数类型必须是给定的或者子类型" class="headerlink" title="四、extends、&lt;=、参数类型必须是给定的或者子类型"></a>四、<code>extends</code>、<code>&lt;=</code>、参数类型必须是给定的或者子类型</h2><h3 id="1、上界为某个具体类"><a href="#1、上界为某个具体类" class="headerlink" title="1、上界为某个具体类"></a>1、上界为某个具体类</h3><ul><li>可以使用<code>extends</code>来限定一个上界，此时参数类型必须是<strong>给定的类型或者其子类型</strong>；</li><li>比如定义一个<code>NumberPair</code>类，限定两个参数类型必须是<code>Number</code>或者子类型，这样限定之后，在子类中，<code>first</code>、<code>second</code>变量就可以当做<code>Number</code>进行处理了，比如调用<code>Number</code>类中的方法<code>doubleValue()</code>、<code>intValue</code>等；</li></ul><p>示例代码，(省略了上面的<code>Pair&lt;U,V&gt;</code>类)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericExtends</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">NumberPair</span><span class="token operator">&lt;</span>U <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">,</span> V <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span>U<span class="token punctuation">,</span> V<span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">NumberPair</span><span class="token punctuation">(</span>U first<span class="token punctuation">,</span> V second<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// must realize (achieve)</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        NumberPair<span class="token operator">&lt;</span>Double<span class="token punctuation">,</span> Integer<span class="token operator">></span>np <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NumberPair</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;U, V>可以是 Number的子类，即 &lt;=</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2、上界为某个接口"><a href="#2、上界为某个接口" class="headerlink" title="2、上界为某个接口"></a>2、上界为某个接口</h3><p>在泛型方法中，一种常见的限定类型是必须实现<code>Comparable</code>接口: </p><ul><li><p>下面的例子，要进行元素的比较，要求元素必须实现<code>Comparable</code>接口， 所以给类型参数设置了一个上边界<code>Comparable</code> 必须实现<code>Comparable</code>接口；</p></li><li><p>可以理解为： T是一种数据类型，必须实现Comparable,且必须可以与相同类型的元素进行比较；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericExtends2</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 要进行元素的比较，要求元素必须实现Comparable接口</span>  <span class="token comment" spellcheck="true">// 所以给类型参数设置了一个上边界Comparable,T 必须实现Comparable接口</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">></span> T <span class="token function">getMax</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>      T max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> max<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 不过上面这么写会有警告 因为Comparable是一个泛型接口，它也需要一个类型参数，所以下面的写法比较好</span>  <span class="token comment" spellcheck="true">// 理解: T是一种数据类型，必须实现Comparable,且必须可以与相同类型的元素进行比较</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">></span> T <span class="token function">getMax2</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>      T max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> max<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3、上界为其他参数类型"><a href="#3、上界为其他参数类型" class="headerlink" title="3、上界为其他参数类型"></a>3、上界为其他参数类型</h3></li><li><p>这里模仿<code>ArrayList</code>来创建一个类， 并想着实现其中的<code>addAll()</code>方法，但是如果不使用一个上界的话，会出现无法添加子类的情况，看下面的代码，<code>Number</code>的集合理应可以添加<code>Integer</code>类型的元素。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericExtends3</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// seems like ArrayList</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DynamicArray</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>      <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">DynamicArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>DEFAULT_CAPACITY<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// simulate ArrayList</span>          <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>oldCapacity <span class="token operator">>=</span> minCapacity<span class="token punctuation">)</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>newCapacity <span class="token operator">&lt;</span> minCapacity<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果扩展2倍还是小于minCapacity，就直接扩展成为minCapacity</span>              newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>          data <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">ensureCapacity</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          data<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> size<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> E <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> E e<span class="token punctuation">)</span><span class="token punctuation">{</span>          E oldValue <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>          data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>          <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span>DynamicArray<span class="token operator">&lt;</span>E<span class="token operator">></span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token function">add</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      DynamicArray<span class="token operator">&lt;</span>Number<span class="token operator">></span>numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicArray</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      DynamicArray<span class="token operator">&lt;</span>Integer<span class="token operator">></span>ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicArray</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ints<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ints<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        numbers.addAll(ints); // compile error</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>那个需求感觉上是可以，但是通过反证法可以发现是行不通的，看下面代码以及解释: </p></li></ul><pre class=" language-java"><code class="language-java">DynamicArray<span class="token operator">&lt;</span>Number<span class="token operator">></span>numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicArray</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>numbers <span class="token operator">=</span> ints<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 假设合法</span>numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 那么这一样也可以，此时因为numbers和ints指向的同一个堆区空间，则ints中出现double类型值，显然不合理</span><span class="token comment" spellcheck="true">//再看一个例子</span>List<span class="token operator">&lt;</span>Object<span class="token operator">></span>olist <span class="token operator">=</span> null<span class="token punctuation">;</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span>slist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>olist <span class="token operator">=</span> slist<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// err</span><span class="token comment" spellcheck="true">//如果上述假设合理</span>olist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//则slist中就会出现Integer类型的值，显然不合理</span></code></pre><p>所以，可以使用上界类型将<code>addAll</code>方法改进如下: </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//传入的是T类型，限定为是E类型或者E的子类类型</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span>DynamicArray<span class="token operator">&lt;</span>T<span class="token operator">></span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">add</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h2 id="五、通配符"><a href="#五、通配符" class="headerlink" title="五、通配符?"></a>五、通配符<code>?</code></h2><h3 id="1、有限定类型通配符的简单使用"><a href="#1、有限定类型通配符的简单使用" class="headerlink" title="1、有限定类型通配符的简单使用"></a>1、有限定类型通配符的简单使用</h3><p>使用通配符来写上面的<code>addAll()</code>方法: </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span>DynamicArray<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">add</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>&lt;? extends E&gt;</code>表示有限定通配符，匹配<code>E</code>或<code>E</code>的某个子类型，具体是什么子类型是未知的。<br>看一下<code>public &lt;T extends E&gt;void addAll(DynamicArray&lt;T&gt;arr)</code> 和<code>public void addAll(DynamicArray&lt;? extends E&gt;arr)</code>的区别: </p><ul><li><code>&lt;T extends E&gt;</code>用于<strong>定义</strong>类型参数，它声明了一个类型参数<code>T</code>，可放在泛型类中类名的后面、泛型方法返回值前面；</li><li><code>&lt;? extends E&gt;</code>用于实例化类型参数，它用于实例化泛型变量中的类型参数，只是这个具体类型是未知的，只知道它是<code>E</code>或<code>E</code>的子类型；</li></ul><p>它们虽然不一样，但是经常可以达成同样的目标。</p><h3 id="2、无限定类型通配符"><a href="#2、无限定类型通配符" class="headerlink" title="2、无限定类型通配符"></a>2、无限定类型通配符</h3><p>简单使用:  第一种方式使用通配符，第二种方式使用类型参数，可以达到同样的目的: </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用通配符  </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>DynamicArray<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> arr<span class="token punctuation">,</span> Object elm<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elm<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用类型参数 type parameter</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">int</span> <span class="token function">indexOf2</span><span class="token punctuation">(</span>DynamicArray<span class="token operator">&lt;</span>T<span class="token operator">></span> arr<span class="token punctuation">,</span> Object elm<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elm<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>但是通配符也有一些限制</p><h4 id="1-、第一条限制-只能读，不能写"><a href="#1-、第一条限制-只能读，不能写" class="headerlink" title="1)、第一条限制: 只能读，不能写"></a>1)、第一条限制: 只能读，不能写</h4><p>比如 ，下面三行代码就会报错 : </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WildcardCharacter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> numbers <span class="token operator">=</span> ints<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用extends通配符指定上界</span>        Integer a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        numbers.add(a); // err</span><span class="token comment" spellcheck="true">//        numbers.add(Object(a)); //err</span><span class="token comment" spellcheck="true">//        numbers.add(Number(a)); //err</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>解释: <code>?</code>表示<strong>类型安全无知</strong>，<code>? extends Number</code>表示是<code>Number</code>的某个子类型，但不知道具体子类型，如果允许写入，Java就无法确保类型安全性，所以干脆禁止；</li><li>这种限制关系是好的，但是这使得很多理应可以完成的操作可能会出现错误；</li></ul><p>比如: 下面的代码中最后两行会报错，原因就是不能修改<code>？</code>通配符的值： </p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>     Object tmp <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>     arr<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// can't change the value</span>     arr<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>再看一个例子：在方法传递参数的时候，不能往参数中添加元素: </p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericExtends4</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Fruit</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Apple</span> extends Fruit<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Pear</span> extends Fruit<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FuShiApple</span> extends Apple<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Clazz</span><span class="token operator">&lt;</span>T extends Fruit<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//创建的类必须是Fruit的子类//为了自己类中使用这个类</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Clazz<span class="token operator">&lt;</span>Fruit<span class="token operator">></span>t <span class="token operator">=</span> <span class="token keyword">new</span> Clazz<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// &lt;= 关系</span>        Clazz<span class="token operator">&lt;</span>Apple<span class="token operator">></span>t2 <span class="token operator">=</span> <span class="token keyword">new</span> Clazz<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Clazz<span class="token operator">&lt;</span>Pear<span class="token operator">></span>t3 <span class="token operator">=</span> <span class="token keyword">new</span> Clazz<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Clazz<span class="token operator">&lt;</span>FuShiApple<span class="token operator">></span>t4<span class="token operator">=</span> <span class="token keyword">new</span> Clazz<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用方法</span>        List<span class="token operator">&lt;</span><span class="token operator">?</span> extends Fruit<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> ArrayList<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Fruit<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> ArrayList<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Apple<span class="token operator">></span> list3 <span class="token operator">=</span> <span class="token keyword">new</span> ArrayList<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span><span class="token operator">?</span> extends Apple<span class="token operator">></span> list4 <span class="token operator">=</span> <span class="token keyword">new</span> ArrayList<span class="token operator">&lt;</span>FuShiApple<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//存放Apple以及它的子类</span>        <span class="token function">add</span><span class="token punctuation">(</span>list4<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>FuShiApple<span class="token operator">></span> list5 <span class="token operator">=</span> <span class="token keyword">new</span> ArrayList<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>list5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//？为什么错误 : 因为 ? 等同于？ extends Object :不是&lt;= Fruit的 下面两个是一样的</span>        List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span>list6 <span class="token operator">=</span> <span class="token keyword">new</span> ArrayList<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span><span class="token operator">?</span> extends Object<span class="token operator">></span>list7 <span class="token operator">=</span> <span class="token keyword">new</span> ArrayList<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//add(list6); // err</span>        <span class="token comment" spellcheck="true">//add(list7); // err</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 为了保证向下兼容的一致性，不能添加元素</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> extends Fruit<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/** 不能往里面加这样的对象 不能用于添加数据         list.add(new Fruit());         list.add(new Apple());         list.add(new Pear());         */</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-、第二条限制-参数类型间的依赖关系"><a href="#2-、第二条限制-参数类型间的依赖关系" class="headerlink" title="2)、第二条限制: 参数类型间的依赖关系"></a>2)、第二条限制: 参数类型间的依赖关系</h4><p>如果参数类型之间有依赖关系，也只能用类型参数，比如下面的例子: </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// S和D要么相同，要么S是D的子类，否则类型不兼容，有编译错误</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>D<span class="token punctuation">,</span>S <span class="token keyword">extends</span> <span class="token class-name">D</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>D<span class="token operator">></span> dest<span class="token punctuation">,</span> ArrayList<span class="token operator">&lt;</span>S<span class="token operator">></span> src<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>src<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        dest<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 可以使用通配符简化一下</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>D<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">copy2</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>D<span class="token operator">></span> dest<span class="token punctuation">,</span> ArrayList<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">D</span><span class="token operator">></span> src<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>src<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        dest<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-、第三条限制-如果返回值依赖于类型参数，也不能用通配符"><a href="#3-、第三条限制-如果返回值依赖于类型参数，也不能用通配符" class="headerlink" title="3)、第三条限制: 如果返回值依赖于类型参数，也不能用通配符"></a>3)、第三条限制: 如果返回值依赖于类型参数，也不能用通配符</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//不能使用通配符，只能用类型参数，因为要返回</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">></span> T <span class="token function">max</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>T<span class="token operator">></span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    T max <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            max <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>那么到底该用通配符还是类型参数呢? </p><ul><li><p>通配符形式都可以用类型参数的形式来替代，通配符能做的，用类型参数都能做。</p></li><li><p>通配符形式可以减少类型参数，形式上往往更为简单，可读性也更好，所以，能用通配符的就用通配符。</p></li><li><p>如果类型参数之间有依赖关系，或者返回值依赖类型参数，或者需要写操作，则只能用类型参数。</p></li></ul><p>通配符形式和类型参数往往配合使用，比如，上面的<code>copy2</code>方法，定义必要的类型参数，使用通配符表达依赖，并接受更广泛的数据类型。</p><hr><h2 id="六、super、-gt-、超类型通配符"><a href="#六、super、-gt-、超类型通配符" class="headerlink" title="六、super、&gt;=、超类型通配符"></a>六、<code>super</code>、<code>&gt;=</code>、超类型通配符</h2><ul><li>简单的来说，<code>super</code>和<code>extends</code>刚好相反，匹配的是<code>&gt;= E</code>的类型；</li><li>相当于是规定了一个下界，可以匹配 <code>&gt;=</code>的类型；</li></ul><h3 id="1、使用场景"><a href="#1、使用场景" class="headerlink" title="1、使用场景"></a>1、使用场景</h3><p>看它的使用场景， 在<code>DynamicArray</code>中添加一个<code>copyTo</code>方法，功能是将当前对象容器中的数拷贝到传入的参数<code>dest</code>容器中: </p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//add current value to the dest collection</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">copyTo</span><span class="token punctuation">(</span>DynamicArray<span class="token operator">&lt;</span>E<span class="token operator">></span>dest<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dest<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         dest<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>然后不使用<code>super</code>，看下面的代码，最后一行就会报错，但是将<code>Integer</code>数组拷贝到<code>Number</code>数组理应是可以的: </p><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>       DynamicArray<span class="token operator">&lt;</span>Integer<span class="token operator">></span>ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicArray</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ints<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ints<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       DynamicArray<span class="token operator">&lt;</span>Number<span class="token operator">></span>nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicArray</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ints<span class="token punctuation">.</span><span class="token function">copyTo</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将ints 中的元素拷贝到nums，本应该是可以的，但是如果没有? super E就不行</span>   <span class="token punctuation">}</span></code></pre><p>使用超类型通配符就可以解决上面的问题:  </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">copyTo</span><span class="token punctuation">(</span>DynamicArray<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span>dest<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dest<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        dest<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2、没有-lt-T-super-E-gt-有-lt-T-extend-E-gt"><a href="#2、没有-lt-T-super-E-gt-有-lt-T-extend-E-gt" class="headerlink" title="2、没有&lt; T super E&gt;(有&lt;T extend E&gt;)"></a>2、没有<code>&lt; T super E&gt;</code>(有<code>&lt;T extend E&gt;</code>)</h3><p>比较类型参数限定与超类型通配符，类型参数限定只有<code>extends</code>形式，没有<code>super</code>形式，比如前面的<code>copyTo</code>方法，它的通配符形式的声明为：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">copyTo</span><span class="token punctuation">(</span>DynamicArray<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> E<span class="token operator">></span> dest<span class="token punctuation">)</span></code></pre><p>如果类型参数限定支持super形式，则应该是：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>T <span class="token keyword">super</span> E<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">copyTo</span><span class="token punctuation">(</span>DynamicArray<span class="token operator">&lt;</span>T<span class="token operator">></span> dest<span class="token punctuation">)</span></code></pre><p>但是，Java并不支持这种语法。对于有限定的通配符形式<code>&lt;? extends E&gt;</code>，可以用类型参数限定替代，但是对于类似上面的超类型通配符，则无法用类型参数替代。</p><p>再看和<code>extends</code>使用方法传递参数的对比: (<strong>在方法传递中可以添加自己和子类的数据，　区别于<code>extends</code>，<code>extends</code>都不可以添加</strong>)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericSuper2</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Fruit</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token keyword">extends</span> <span class="token class-name">Fruit</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Pear</span> <span class="token keyword">extends</span> <span class="token class-name">Fruit</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FuShiApple</span> <span class="token keyword">extends</span> <span class="token class-name">Apple</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Clazz</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Fruit</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//创建的类必须是Fruit的子类//为了自己类中使用这个类</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Apple<span class="token operator">></span>list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Fruit<span class="token operator">></span>list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span>list3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//？super的使用</span>        List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Apple<span class="token operator">></span>list4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>list4<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Apple<span class="token operator">></span>list5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>list5<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>FuShiApple<span class="token operator">></span>list6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// &lt; 的不行</span><span class="token comment" spellcheck="true">//        add(list6); // err</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//只要是Apple的祖先都可以调用这个方法 >= </span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>List <span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Apple<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">/*** 不能用于添加父类对象的数据         * list.add(new Fruit());         */</span>        <span class="token comment" spellcheck="true">//区别于extends, 可以添加自己和子类的数据</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FuShiApple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h2 id="七、通配符extends、super比较"><a href="#七、通配符extends、super比较" class="headerlink" title="七、通配符extends、super比较"></a>七、通配符<code>extends</code>、<code>super</code>比较</h2><p>通配符比较: </p><ul><li><p>共同点: 目的都是为了使方法接口更为灵活，可以接受更为广泛的类型。</p></li><li><p><code>&lt;? super E&gt;</code>用于灵活<strong>写入或比较</strong>，使得对象可以<strong>写入父类型的容器</strong>(<code>&gt;=</code>)，使得父类型的比较方法可以应用于子类对象。</p></li><li><p><code>&lt;? extends E&gt;</code><strong>用于灵活读取</strong>，使得方法可以读取<code>E</code>或<code>E</code>的任意子类型的容器对象。</p></li></ul><p>Java容器类的实现中，有很多这种用法，比如，<code>Collections</code>中就有如下一些方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">>></span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">,</span> Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> c<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> dest<span class="token punctuation">,</span> List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> src<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">max</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> coll<span class="token punctuation">,</span> Comparator<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> comp<span class="token punctuation">)</span></code></pre><hr><h2 id="八、泛型擦除"><a href="#八、泛型擦除" class="headerlink" title="八、泛型擦除"></a>八、泛型擦除</h2><ul><li><p>泛型信息只存在于代码编译阶段，在进入 JVM 之前，与泛型相关的信息会被擦除掉，专业术语叫做类型擦除。</p></li><li><p>通俗地讲，泛型类和普通类在 java 虚拟机内是没有什么特别的地方；</p></li></ul><p>看下面的代码: </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericWipe</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> slist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ilist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>slist<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ilist<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这段代码的输出结果是<code>true</code>。正如一开始说的，编译器会将<code>T</code>擦除，然后替换成为<code>Object</code>(并不完全正确)，在必要的时候进行强制类型转换。</p><p>再看以下代码的输出结果:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericWipe</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> T obj<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">GenericWipe</span><span class="token punctuation">(</span>T obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        GenericWipe<span class="token operator">&lt;</span>String<span class="token operator">></span>gw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericWipe</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"wipe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">gwClass</span> <span class="token operator">=</span> gw<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gwClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 得到运行时的状态信息,运行时是真实的类型</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fs <span class="token operator">=</span> gwClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//得到在JVM中的类型 </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> Field f<span class="token operator">:</span>fs<span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Field name "</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" type:"</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">JavaPrimary<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span>GenericWipe<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>Field name obj type<span class="token operator">:</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object</code></pre><p>第一种类型是<code>Class</code> 的类型是 <code>GenericWipe</code>，并不是 <code>GenericWipe&lt;T&gt;</code>这种形式，第二种类型是<code>Jvm</code>中的类型；<br>那是不是泛型类被类型擦除后，相应的类型就被替换成 Object 类型呢？这种说法不是完全正确的。</p><p>更改一下代码: </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericWipe</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">String</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// &lt;= String</span>    <span class="token keyword">private</span> T obj<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">GenericWipe</span><span class="token punctuation">(</span>T obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        GenericWipe<span class="token operator">&lt;</span>String<span class="token operator">></span>gw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericWipe</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"wipe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">gwClass</span> <span class="token operator">=</span> gw<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gwClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 得到运行时的状态信息,运行时是真实的类型</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fs <span class="token operator">=</span> gwClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//得到在JVM中的类型</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> Field f<span class="token operator">:</span>fs<span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Field name "</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" type:"</span> <span class="token operator">+</span> f<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出: </p><pre class=" language-java"><code class="language-java">JavaPrimary<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span>GenericWipe<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>Field name obj type<span class="token operator">:</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String</code></pre><p>可以看到，第二个输出变成了<code>String</code>。所以结论如下: </p><ul><li>在泛型类被类型擦除的时候，之前泛型类中的类型参数部分如果没有指定上限，如<code>&lt;T&gt;</code>则会被转译成普通的 <code>Object</code>类型；</li><li>如果指定了上限如 <code>&lt;T extends String&gt;</code> 则类型参数就被替换成类型上限。</li></ul><p>所以，在反射中，<code>add()</code> 这个方法对应的 <code>Method</code> 的签名应该是 Object.class。也就是说，如果你要在反射中找到 <code>add</code> 对应的 <code>Method</code>，你应该调用 <code>getDeclaredMethod(&quot;add&quot;,Object.class)</code>否则程序会报错，提示没有这么一个方法，原因就是类型擦除的时候，<code>T</code> 被替换成 <code>Object</code> 类型了。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericWipe</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// &lt;= String</span>    <span class="token comment" spellcheck="true">// public class GenericWipe&lt;T extends String> {  // &lt;= String</span>    <span class="token keyword">private</span> T obj<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">GenericWipe</span><span class="token punctuation">(</span>T obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>T obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        GenericWipe<span class="token operator">&lt;</span>String<span class="token operator">></span>gw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericWipe</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"wipe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">gwClass</span> <span class="token operator">=</span> gw<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gwClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 得到运行时的状态信息,运行时是真实的类型</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> gwClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> Method m<span class="token operator">:</span>methods <span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" method:"</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>更加详细的解释见<a href="https://blog.csdn.net/briblue/article/details/76736356#t11" target="_blank" rel="noopener">这里</a>。</strong></p><hr><h2 id="九、泛型注意事项"><a href="#九、泛型注意事项" class="headerlink" title="九、泛型注意事项"></a>九、泛型注意事项</h2><h3 id="1、基本类型不能用于实例化类型参数，也就是泛型类或者泛型方法中，不接受-8-种基本数据类型。"><a href="#1、基本类型不能用于实例化类型参数，也就是泛型类或者泛型方法中，不接受-8-种基本数据类型。" class="headerlink" title="1、基本类型不能用于实例化类型参数，也就是泛型类或者泛型方法中，不接受 8 种基本数据类型。"></a>1、基本类型不能用于实例化类型参数，也就是泛型类或者泛型方法中，不接受 8 种基本数据类型。</h3><p>比如: </p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> li <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// err</span>List<span class="token operator">&lt;</span><span class="token keyword">boolean</span><span class="token operator">></span> li <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// err</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> li <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//ok</span>List<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> li1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ok</span></code></pre><h3 id="2、运行时类型信息不适用于泛型"><a href="#2、运行时类型信息不适用于泛型" class="headerlink" title="2、运行时类型信息不适用于泛型"></a>2、运行时类型信息不适用于泛型</h3><p>这个也就是上面说的泛型擦除，泛型不支持运行时的信息(和反射有关)。</p><p><code>instanceof</code>后面是接口或类名，<code>instanceof</code>是运行时判断，也与泛型无关，所以，<code>Java</code>也不支持类似如下写法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>p1 <span class="token keyword">instanceof</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">)</span></code></pre><h3 id="3、Java-不能创建具体类型的泛型数组"><a href="#3、Java-不能创建具体类型的泛型数组" class="headerlink" title="3、Java 不能创建具体类型的泛型数组"></a>3、<code>Java</code> 不能创建具体类型的泛型数组</h3><p>例如下面的<code>list1</code>和<code>list2</code>创建是错误的，但是后面的<code>?</code>可以，因为<code>?</code>代表的是未知类型: </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericOther</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        List&lt;Integer>[] list1 = new ArrayList&lt;Integer>[]; // complier err</span><span class="token comment" spellcheck="true">//        List&lt;Boolean> list2 = new ArrayList&lt;Boolean>[]; // complier err</span>        List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> list3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个却可以 ? 代表的是未知类型</span>        list3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> tmp <span class="token operator">=</span> list3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        tmp.set(1, 2); complier err</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><code>List&lt;Boolean&gt;</code> 和 <code>List&lt;Boolean&gt;</code> 在 <code>Jvm</code> 中等同于<code>List&lt;Object&gt;</code> ，所有的类型信息都被擦除，程序也无法分辨一个数组中的元素类型具体是<code>List&lt;Integer&gt;</code>类型还是<code>List&lt;Boolean&gt;</code> 类型。</li><li><code>？</code> 代表未知类型，涉及的操作都基本上与类型无关，<code>Jvm</code> 不针对它对类型作判断，因此它能编译通过，但是，它只能读，不能写。比如，上面的 <code>tmp</code> 这个局部变量，它只能进行 <code>get()</code> 操作，不能进行 <code>add()</code> 操作。</li></ul><p>再从如果可以创建泛型数组会出现什么样的问题来看:<br>数组可以进行不同类型之间的转换，但是也需要注意使用，使用不当就会造成运行时异常，而如果运行创建泛型数组也会产生类似的问题，所以<code>Java</code>干脆禁止。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoGenericClassArray</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Pair</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//　Generic Class</span>        <span class="token keyword">private</span> Object first<span class="token punctuation">;</span>        <span class="token keyword">private</span> Object second<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Pair</span><span class="token punctuation">(</span>Object first<span class="token punctuation">,</span> Object second<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token operator">=</span> first<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> second<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Object <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> first<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Object <span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> second<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 数组是Java直接支持的概念，它知道数组元素的实际类型，</span>        <span class="token comment" spellcheck="true">// 它知道Object和Number都是Integer的父类型，所以这个操作是允许的。</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Number<span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> ints<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  is ok</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objs <span class="token operator">=</span> ints<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 虽然Java允许这种转换，但是如果使用不恰当，就有可能引起运行时异常</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> ints2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objs2 <span class="token operator">=</span> ints2<span class="token punctuation">;</span>        objs2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// RuntimeException</span><span class="token comment" spellcheck="true">//        Pair&lt;Object, Integer>[] options = new Pair&lt;Object, Integer>[3]; //如果可以，那最后一行就会不会编译错误，这样显然是不行的</span><span class="token comment" spellcheck="true">//        Object[] objs = options;</span><span class="token comment" spellcheck="true">//        objs[0] = new Pair&lt;Double, String>(12.34, "hello");</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4、不能通过类型参数创建对象"><a href="#4、不能通过类型参数创建对象" class="headerlink" title="4、不能通过类型参数创建对象"></a>4、不能通过类型参数创建对象</h3><p>下面的写法是非法的。</p><pre class=" language-java"><code class="language-java">T elm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>如果允许，本来你以为创建的就是对应类型的对象，但由于类型擦除，Java只能创建Object类型的对象，而无法创建T类型的对象。<br>那如果确实希望根据类型创建对象呢？需要设计<code>API</code>接受类型对象，即<code>Class</code>对象，并使用<code>Java</code>中的反射机制，如果类型有默认构造方法，可以调用<code>Class</code>的<code>newInstance</code>方法构建对象：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">create</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> type<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5、泛型类类型参数不能用于静态变量和方法，泛型类中泛型只能用在成员变量上，只能使用引用类型，在接口中泛型只能只能用在抽象方法中，全局常量不能使用泛型"><a href="#5、泛型类类型参数不能用于静态变量和方法，泛型类中泛型只能用在成员变量上，只能使用引用类型，在接口中泛型只能只能用在抽象方法中，全局常量不能使用泛型" class="headerlink" title="5、泛型类类型参数不能用于静态变量和方法，泛型类中泛型只能用在成员变量上，只能使用引用类型，在接口中泛型只能只能用在抽象方法中，全局常量不能使用泛型"></a>5、泛型类类型参数不能用于静态变量和方法，泛型类中泛型只能用在成员变量上，只能使用引用类型，在接口中泛型只能只能用在抽象方法中，全局常量不能使用泛型</h3><p>对于泛型类声明的类型参数，可以在实例变量和方法中使用，但在静态变量和静态方法中是不能使用的。下面的写法是非法的: </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> T instance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> T <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 创建实例</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    </code></pre><p>如果合法的话，那么对于每种实例化类型，都需要有一个对应的静态变量和方法。但由于类型擦除，<code>Singleton</code>类型只有一份，静态变量和方法都是类型的属性，且与类型参数无关，所以不能使用泛型类类型参数。</p><p>但是，对于静态方法，它可以是泛型方法，可以声明自己的类型参数，这个参数与泛型类的类型参数是没有关系的。</p><h3 id="6、子类继承父类泛型"><a href="#6、子类继承父类泛型" class="headerlink" title="6、子类继承父类泛型"></a>6、子类继承父类泛型</h3><p>注意子类继承泛型的注意事项: 可以有四种方式，可以按需实现，或者定义子类自己的泛型等。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span>T2<span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//注意实际过程中一般定义为抽象的父类</span>        T1 age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>T2 name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//抽象方法</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//1)全部保留</span>    <span class="token keyword">class</span> <span class="token class-name">C1</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span>T2<span class="token punctuation">,</span>A<span class="token punctuation">,</span>B<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span>T2<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//除了继承父类,可以自己"加""富二代"(不是负二代)</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>T2 name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// this.age -->  T1类型</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//2)部分保留</span>    <span class="token keyword">class</span> <span class="token class-name">C2</span><span class="token operator">&lt;</span>T2<span class="token punctuation">,</span>A<span class="token punctuation">,</span>B<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>T2<span class="token operator">></span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>T2 name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// this.age -->  Integer类型</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//不保留: -->按需实现</span>    <span class="token keyword">class</span> <span class="token class-name">C3</span><span class="token operator">&lt;</span>A<span class="token punctuation">,</span>B<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//注意这里是String 不是T2</span>            <span class="token comment" spellcheck="true">// this.age -->  Integer类型</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//2)没有类型 : 擦除 (类似于Object)//相当于</span>    <span class="token keyword">class</span> <span class="token class-name">C4</span><span class="token operator">&lt;</span>A<span class="token punctuation">,</span>B<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//相当于  class C4&lt;A,B> extends Father&lt;Object,Object>{}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>Object name<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//注意这里是Object(完全没有类型(擦除))</span>            <span class="token comment" spellcheck="true">// this.age -->  Object类型</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过客</title>
      <link href="/2019/09/14/guoke/"/>
      <url>/2019/09/14/guoke/</url>
      
        <content type="html"><![CDATA[<p>似一阵风，不留一点痕迹，</p><p>我只是一粒细末，无足轻重。</p><p>时光，于天空划破一根弧线，</p><p>曾绚烂，曾明媚，曽流泪。</p><p>似一片叶，冬天不需要它，</p><a id="more"></a><p>景致已满目荒凉，凋零又何妨？</p><p>透明的脉络，一层层消逝，</p><p>骨子里，灵魂里，没有了声息。</p><p>似一只鸟，被囚禁了翅膀，</p><p>终究飞不到那座孤岛，羽翼己断，</p><p>何苦这般？不要给自己难堪。</p><p>流浪的人生，落叶无痕草成灰。</p><p>弃我去者，去之则不必留，</p><p>乱我心者，小人之心不必烦忧。</p><p>时间是个很好的诉说者，</p><p>久了，淡了，腻了，该走了。</p><p>一个人，相识了习惯了，</p><p>一个人，熟悉了陌生了。</p><p>风卷着雨，两缠绕着风，</p><p>来也匆匆，去也匆匆，心生疼痛。</p><p>不想在烦忧中消磨珍贵的时光，</p><p>我无法左右别人，却可以左右自己，</p><p>心还在跳，懦弱给谁看？</p><p>嫉妒别人的光鲜，阴暗的是自己的心。</p><p>没有什么是突然结束的</p><p>任何结束都有着漫长压抑的伏笔。</p><p>因我，只是人间一过客……</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
